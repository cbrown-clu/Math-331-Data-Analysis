return(y)
}
y
epsilon_filter <- function(x,epsilon = 10^(-5)) {
y <- x
y <- unique(y)
i <- 1
while(i<= length(y)) {
flag <- abs(y-y[i])>0 & abs(y-y[i])<epsilon
y <- y[-which(flag)]
i <- i+1
}
return(y)
}
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
print(unique(record))
unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1])
}
y <- dds_stability(f,0.1)
y
epsilon_filter(y)
epsilon_filter <- function(x,epsilon = 10^(-10)) {
y <- x
y <- unique(y)
i <- 1
while(i<= length(y)) {
flag <- abs(y-y[i])>0 & abs(y-y[i])<epsilon
y <- y[-which(flag)]
i <- i+1
}
return(y)
}
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
print(unique(record))
unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1])
}
y <- dds_stability(f,0.1)
epsilon_filter(y)
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
print(unique(record))
epsilon_filter(unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1]))
}
y <- dds_stability(f,0.1)
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
epsilon_filter(unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1]))
}
y <- dds_stability(f,0.1)
k <- 3.2
f <- function(x) {
return(k*x*(1-x))
}
epsilon_filter <- function(x,epsilon = 10^(-10)) {
y <- x
y <- unique(y)
i <- 1
while(i<= length(y)) {
flag <- abs(y-y[i])>0 & abs(y-y[i])<epsilon
y <- y[-which(flag)]
i <- i+1
}
return(y)
}
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
epsilon_filter(unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1]))
}
y <- dds_stability(f,0.1)
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1])
}
y <- dds_stability(f,0.1)
epsilon_filter(y)
epsilon_filter <- function(x,epsilon = 10^(-10)) {
y <- x
y <- unique(y)
i <- 1
print(y)
while(i<= length(y)) {
flag <- abs(y-y[i])>0 & abs(y-y[i])<epsilon
y <- y[-which(flag)]
i <- i+1
print(y)
}
return(y)
}
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1])
}
y <- dds_stability(f,0.1)
epsilon_filter(y)
epsilon_filter <- function(x,epsilon = 10^(-10)) {
y <- x
print(y)
y <- unique(y)
i <- 1
print(y)
while(i<= length(y)) {
flag <- abs(y-y[i])>0 & abs(y-y[i])<epsilon
y <- y[-which(flag)]
i <- i+1
print(y)
}
return(y)
}
epsilon_filter(y)
i <- 1
epsilon <- 10^(-10)
abs(y-y[i])>0 & abs(y-y[i])<epsilon
which(abs(y-y[i])>0 & abs(y-y[i])<epsilon)
!(abs(y-y[i])>0 & abs(y-y[i])<epsilon)
epsilon_filter <- function(x,epsilon = 10^(-10)) {
y <- x
print(y)
y <- unique(y)
i <- 1
print(y)
while(i<= length(y)) {
flag <- !(abs(y-y[i])>0 & abs(y-y[i])<epsilon)
y <- y[flag]
i <- i+1
print(y)
}
return(y)
}
epsilon_filter(y)
epsilon_filter <- function(x,epsilon = 10^(-10)) {
y <- x
y <- unique(y)
i <- 1
while(i<= length(y)) {
flag <- !(abs(y-y[i])>0 & abs(y-y[i])<epsilon)
y <- y[flag]
i <- i+1
}
return(y)
}
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
epsilon_filter(unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1]))
}
y <- dds_stability(f,0.1)
k <- 3.6
f <- function(x) {
return(k*x*(1-x))
}
epsilon_filter <- function(x,epsilon = 10^(-10)) {
y <- x
y <- unique(y)
i <- 1
while(i<= length(y)) {
flag <- !(abs(y-y[i])>0 & abs(y-y[i])<epsilon)
y <- y[flag]
i <- i+1
}
return(y)
}
dds_stability <- function(f,initial,burnin=5000,len=500) {
x <- initial
for (i in 1:burnin) {
x <- f(x)
}
record <- c(x)
for (i in 2:len) {
x <- f(x)
record <- c(record,x)
}
epsilon_filter(unique(kmeans(record,centers=unique(record),iter.max=100)$centers[,1]))
}
y <- dds_stability(f,0.1)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
x <- seq(from=0,to=1,by=0.01)
y <- x^2-2
y
y <- x^2+2
y
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
df <- read.csv("https://github.com/cbrown-clu/Math-331-Data-Analysis/blob/master/B.%20Data%20sets/BookstorePriceData.csv")
url <- "https://github.com/cbrown-clu/Math-331-Data-Analysis/blob/master/B.%20Data%20sets/BookstorePriceData.csv"
df <- read.csv(url)
df <- read.csv(file=url)
url <- "https://github.com/cbrown-clu/Math-331-Data-Analysis/blob/master/B.%20Data%20sets/BookstorePriceData.csv"
df <- read.csv(file=url)
url <- "http://github.com/cbrown-clu/Math-331-Data-Analysis/blob/master/B.%20Data%20sets/BookstorePriceData.csv"
df <- read.csv(file=url)
?read.csv
df <- read.csv(file=url,header=TRUE)
head(df)
url <- "http://github.com/Math-331-Data-Analysis/B. Data sets/BookstorePriceData.csv"
df <- read.csv(file=url,header=TRUE)
library(RCurl)
library(RCurl)
url <- "https://github.com/cbrown-clu/Math-331-Data-Analysis/blob/master/B.%20Data%20sets/BookstorePriceData.csv"
out <- getURL(url)
url <- "http://github.com/cbrown-clu/Math-331-Data-Analysis/blob/master/B.%20Data%20sets/BookstorePriceData.csv"
out <- getURL(url)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
data("iris")
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
Y <- c(0,rep(1,5),rep(2,5),100)
cat("Y = { ",Y," }")
mean(X)
X <- c(0,1,1,1,1,1,2)
mean(X)
mean(Y)
median(X)
median(Y)
table(Z)
Z <- c(rep('red',3),rep('blue',7),rep('green',2),rep('other',5))
table(Z)
sorted(table(Z))
sort(table(Z))
sd(X)
sd(Y)
max(X)-min(X)
?percentile
??percentile
?quantile
quantile(X)
data()
data('LakeHuron')
summary(LakeHuron)
data('LakeHuron')
hist(LakeHuron)
hist(LakeHuron)
X <- as.vector(LakeHuron)
hist(X)
X <- as.numeric(LakeHuron)
hist(X)
?hist
X
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
data('LakeHuron')
hist(LakeHuron)
hist(LakeHuron)
data('LakeHuron')
hist(LakeHuron)
getwd()
data('iris')
data('LakeHuron')
hist(LakeHuron)
hist(c(1,1,1,2,2,3))
hist(c(1,1,1,2,2,3))
hist(c(1,1,1,2,2,3))
hist(c(1,1,1,1,1,2,2,3))
data('iris')
head(iris)
hist(iris$Sepal.Length)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
data('iris')
head(iris)
hist(iris$Sepal.Length)
getwd()
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
data('iris')
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length,frequency=FALSE)
?hist
hist(iris$Sepal.Length,freq=FALSE)
plot(density(iris$Sepal.Length))
hist(iris$Sepal.Length,freq=FALSE,col=red,
title="Histogram and density for Sepal Length")
hist(iris$Sepal.Length,freq=FALSE,col="red",
title="Histogram and density for Sepal Length")
points(density(iris$Sepal.Length),col='blue',lwd=3,type='l')
hist(iris$Sepal.Length,freq=FALSE,col="red",
title="Histogram and density for Sepal Length")
points(density(iris$Sepal.Length),col='blue',lwd=4,type='l')
boxplot(iris$Sepal.Length)
data('iris')
plot(iris$Sepal.Length,iris$Sepal.Width)
library(ggplot2)
ggplot(aes(x=c("Sepal Length"),y=value)) +
geom_violin(width=1.4)
ggplot(data=iris,aes(x=c("Sepal Length"),y=Sepal.Length)) +
geom_violin(width=1.4)
ggplot(data=iris,aes(x=c("Sepal Length"),y=Sepal.Length)) +
geom_violin()
ggplot(data=iris,aes(x=c("Sepal Length"),y=Sepal.Length,fill=name)) +
geom_violin()
ggplot(data=iris,aes(x=c("Sepal Length"),y=Sepal.Length,fill=c("Sepal Length"))) +
geom_violin()
library(ggplot2)
ggplot(data=iris,aes(x=c("Sepal Length"),y=Sepal.Length,fill=c("Sepal Length"))) +
geom_violin() +
theme_ipsum()
library(ggplot2)
ggplot(data=iris,aes(x=c("Sepal Length"),y=Sepal.Length,fill=c("Sepal Length"))) +
geom_violin() +
ggtitle("Violin plot for Sepal Length in the iris dataset")
boxplot(Sepal.Length ~ Species,data=iris)
boxplot(Sepal.Length ~ Species,data=iris,col=Species)
boxplot(Sepal.Length ~ Species,data=iris,col=iris$Species)
boxplot(Sepal.Length ~ Species,data=iris)
library(ggplot2)
ggplot(data=iris,aes(x=Species,y=value,fill=Species)) +
geom_violin()
library(ggplot2)
ggplot(data=iris,aes(x=Species,y=Sepal.Length,fill=Species)) +
geom_violin()
0:100
-50:50
x <- -50:50
which(x>10)
x[x>10 & x^2<400]
ifelse(x<0,NA,x)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
x <- -50:50
coded <- ifelse(x< -10,"low",ifelse(x>10,"high","medium"))
coded
coded <- ifelse(x< -10,"low",x)
coded <- ifelse(coded>10,"high",coded)
coded <- ifelse(coded >= -10 & coded <= 10,"medium",coded)
coded
coded <- ifelse(x< -10,"low",x)
coded <- ifelse(is.numeric(coded) & coded>10,"high",coded)
coded <- ifelse(coded >= -10 & coded <= 10,"medium",coded)
coded
coded <- ifelse(x< -10,"low",x)
coded <- ifelse(is.numeric(coded) & coded>10,"high",coded)
coded <- ifelse(is.numeric(coded) & coded >= -10 & coded <= 10,"medium",coded)
coded
?is.numeric
coded <- ifelse(x< -10,"low",x)
coded <- ifelse(x>10,"high",coded)
coded <- ifelse(x >= -10 & x <= 10,"medium",coded)
coded
f <- function(x) {
y <- x^2
return(y)
}
f(2)
f(-3)
f("red")
f(c(1,2))
g <- function(x) {
if (X>0) {
y <- x
} else {
y <- 0
}
return(y)
}
g(-1)
g <- function(x) {
if (x>0) {
y <- x
} else {
y <- 0
}
return(y)
}
g(-1)
g(3)
g(c(-1,-1,5,7))
g <- Vectorize(g)
g(c(-1,-1,5,7))
x <- -10:1000
h <- function(x) {
if (x<0) {
y <- NA
}
if (x>=0 & x<100) {
y <- "blue"
}
if (x>=100) {
y <- "red"
}
return(y)
}
h <- Vectorize(h)
h(x)
data("iris")
head(iris)
str(iris)
iris[2,3]
iris[2,"Petal.Length"]
iris[,"Petal.Length"]
iris$Petal.Length
iris$Petal.Length[2]
iris[2,]
str(iris[2,])
iris[10:15,]
iris[c(10,15,20,25),]
my_selection <- iris$Species == "setosa"
iris[my_selection,]
iris[iris$Species == "setosa",]
nrow(iris)
ncol(iris)
names(iris)
data("mtcars")
names(mtcars)
help(iris)
df <- iris  #make a new copy of the dataframe and change the copy
new.names <- c("Sepal.Length.cm","Sepal.Width.cm","Petal.Length.cm","Petal.Width.cm","Species")
names(df) <- new.names
names(df)
iris$Petal.Width * iris$Petal.Length
iris$Petal.Area <- iris$Petal.Width * iris$Petal.Length
head(iris)
hist(iris$Petal.Length)
code <- function(x) {
if (x>5.5) {
y <- "long"
} else {
y <- "short"
}
return(y)
}
code <- Vectorize(code)
df$LongPetals <- code(iris$Petal.Length)
df$LongPetals
hist(iris$Sepal.Length)
mtcars$Ratio <- mtcars$hp / mtcars$disp
hist(mtcars$Ratio)
mtcars$RatioCode <- ifelse(mtcars$Ratio > 0.8,0)
mtcars$RatioCode <- ifelse(mtcars$Ratio > 0.8,"high","low")
table(mtcars$cyl,mtcars$RatioCode)
complete.cases(airquality)
length(which(complete.cases(airquality)))
names(airquality)
data(airquality)
head(airquality)
df <- airquality[complete.cases(airquality),]
df$Month
airquality$Month
