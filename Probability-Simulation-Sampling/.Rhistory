alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
ks_data
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate,exact=FALSE)$p.value
})
ks_data <- compute_KS(xmin)
head(ks_data)
sample_size <- length(X)
xmin <- seq(from=1,to=1000,by=1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
head(ks_data)
ks_data
sample_size <- length(X)
xmin <- seq(from=1,to=1000,by=1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
head(ks_data)
sample_size <- length(X)
xmin <- seq(from=1,to=5000,by=10)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
head(ks_data)
max(ks_data)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=10)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
Y <- X[X>=xmin]
sample_size <<- length(Y)
candidate <- draw_sample(xmin)
sample_size <<- length(X)
ks.test(X,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
max(ks_data)
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=10)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
Y <- X[X>=xmin]
sample_size <<- length(Y)
print(sample_size)
candidate <- draw_sample(xmin)
sample_size <<- length(X)
ks.test(X,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
max(ks_data)
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=10)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
Y <- X[X>=xmin]
sample_size <<- length(Y)
candidate <- draw_sample(xmin)
sample_size <<- length(X)
ks.test(Y,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
max(ks_data)
hist(exp(interarrival),breaks=60)
hist(interarrival^0.5,breaks=60)
hist(interarrival^0.2,breaks=60)
hist(interarrival^0.5,breaks=60)
X <- sqrt(interarrival)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- sqrt(interarrival[interarrival>0])
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
hist(candidate)
hist(X)
hist(candidate)
hist(X)
X <- sqrt(interarrival[interarrival>30])
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- sqrt(interarrival)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
hist(interarrival[interarrival>0],breaks=60)
hist(interarrival[interarrival>1000],breaks=60)
X <- interarrival[interarrival>500]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival[interarrival>1000]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival[interarrival>100]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival[interarrival>500]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival[interarrival>50]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival[interarrival>30]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
runks <- Vectorize(function(cutoff) {
X <- interarrival[interarrival>cutoff]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
})
cutoff <- seq(from=10,to=500,by=10)
ksresults <- runks(cutoff)
plot(cutoff,ksresults)
runks <- Vectorize(function(cutoff) {
X <- interarrival[interarrival>cutoff]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)$p.value
})
cutoff <- seq(from=10,to=500,by=10)
ksresults <- runks(cutoff)
plot(cutoff,ksresults)
runks <- Vectorize(function(cutoff) {
X <- interarrival[interarrival>cutoff]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)$p.value
})
cutoff <- seq(from=10,to=100,by=1)
ksresults <- runks(cutoff)
plot(cutoff,ksresults)
X <- interarrival[interarrival>0]
hist(X)
hist(X,breaks=60)
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=10)
draw_sample <- Vectorize(function(xmin) {
XX <- X[X>xmin]
alpha <- 1+1/(sum(log(XX/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
XX <- X[X>=xmin]
sample_size <<- length(XX)
candidate <- draw_sample(xmin)
sample_size <<- length(X)
ks.test(XX,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
plot(xmin,ksdata)
plot(xmin,ks_data)
sample_size <- length(X)
xmin <- seq(from=100,to=1000,by=50)
draw_sample <- Vectorize(function(xmin) {
XX <- X[X>xmin]
alpha <- 1+1/(sum(log(XX/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
XX <- X[X>=xmin]
sample_size <<- length(XX)
candidate <- draw_sample(xmin)
sample_size <<- length(X)
ks.test(XX,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
plot(xmin,ks_data)
hist(interarrival^0.1,breaks=60)
hist(interarrival^0.1[interarrival>1],breaks=60)
hist((interarrival^0.1)[interarrival>1],breaks=60)
X <- (interarrival^0.1)[interarrival>0]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
hist(X)
hist(X,breaks=60)
X <- interarrival^0.1
X <- X[X>1.9]
hist(X,breaks=60)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival^0.5
hist(X,breaks=60)
X <- X[X>20]
hist(X,breaks=60)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival
mu <- mean(X)
v <- var(X)
scale <- v/m
X <- interarrival
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
hist(candidate)
hist(X)
X <- interarrival[interarrival>0]
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- interarrival[interarrival>50]
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- interarrival
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
quakes <- read.csv("Quakes.csv")
quakes2 <- quakes[quakes$Magnitude>1,]
interarrival <- quakes2$TimelineHours[2:nrow(quakes2)] -
quakes2$TimelineHours[1:(nrow(quakes2)-1)]
rm(quakes,quakes2)
quakes <- read.csv("Quakes.csv")
hist(quakes$Magnitude)
hist(quakes$Magnitude,breaks=60)
quakes <- read.csv("Quakes.csv")
interarrival <- quakes$TimelineHours[2:nrow(quakes)] -
quakes$TimelineHours[1:(nrow(quakes)-1)]
rm(quakes)
hist(interarrival,breaks=60)
hist(log(interarrival),breaks=60)
hist(interarrival^0.1,breaks=60)
hist((interarrival^0.1)[interarrival>1],breaks=60)
lambda <- 1/mean(interarrival)
sample_size <- length(interarrival)
candidate <- rexp(sample_size,rate=lambda)
ks.test(interarrival,candidate)
X <- log(interarrival[interarrival>0])
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival[interarrival>0]
hist(X,breaks=60)
sample_size <- length(X)
xmin <- seq(from=100,to=1000,by=50)
draw_sample <- Vectorize(function(xmin) {
XX <- X[X>xmin]
alpha <- 1+1/(sum(log(XX/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
XX <- X[X>=xmin]
sample_size <<- length(XX)
candidate <- draw_sample(xmin)
sample_size <<- length(X)
ks.test(XX,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
plot(xmin,ks_data)
X <- sqrt(interarrival)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
runks <- Vectorize(function(cutoff) {
X <- interarrival[interarrival>cutoff]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)$p.value
})
cutoff <- seq(from=10,to=100,by=1)
ksresults <- runks(cutoff)
plot(cutoff,ksresults)
X <- interarrival^0.5
X <- X[X>20]
hist(X,breaks=60)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- interarrival
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
hist(X)
hist(candidate)
hist(X)
quakes <- read.csv("Quakes.csv")
quakes <- quakes[quakes$Magnitude>=4]
quakes <- quakes[quakes$Magnitude>=4,]
interarrival <- quakes$TimelineHours[2:nrow(quakes)] -
quakes$TimelineHours[1:(nrow(quakes)-1)]
rm(quakes)
hist(log(interarrival),breaks=60)
hist(interarrival,breaks=60)
hist(interarrival)
hist(interarrival,breaks=30)
hist(log(interarrival),breaks=30)
hist(interarrival^0.1,breaks=30)
hist((interarrival^0.1)[interarrival>1],breaks=30)
hist((interarrival^0.1)[interarrival>1.5],breaks=30)
lambda <- 1/mean(interarrival)
sample_size <- length(interarrival)
candidate <- rexp(sample_size,rate=lambda)
ks.test(interarrival,candidate)
X <- interarrival
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- interarrival[interarrival>0]
hist(X,breaks=60)
sample_size <- length(X)
xmin <- seq(from=100,to=1000,by=50)
draw_sample <- Vectorize(function(xmin) {
XX <- X[X>xmin]
alpha <- 1+1/(sum(log(XX/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
XX <- X[X>=xmin]
sample_size <<- length(XX)
candidate <- draw_sample(xmin)
sample_size <<- length(X)
ks.test(XX,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
plot(xmin,ks_data)
X <- interarrival
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
quakes <- read.csv("Quakes.csv")
quakes <- quakes[quakes$Magnitude>=3,]
interarrival <- quakes$TimelineHours[2:nrow(quakes)] -
quakes$TimelineHours[1:(nrow(quakes)-1)]
rm(quakes)
X <- interarrival
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
quakes <- read.csv("Quakes.csv")
hist(quakes$Magnitude)
quakes <- read.csv("Quakes.csv")
mags <- quakes$Magnitudes
rm(quakes)
hist(mags,breaks=30)
mags <- quakes$Magnitude
quakes <- read.csv("Quakes.csv")
mags <- quakes$Magnitude
rm(quakes)
hist(mags,breaks=30)
X <- mags
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- mags[mags>0.5]-0.5
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- mags[mags>0.4]-0.4
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- mags[mags>0.3]-0.3
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- mags[mags>0.35]-0.35
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- mags[mags>0.4]-0.4
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- mags[mags>0.41]-0.41
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
X <- mags[mags>0.395]-0.395
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)
runks <- Vectorize(function(cutoff) {
X <- mags[mags>cutoff]-cutoff
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)$p.value
})
cutoff <- seq(from=0.3,to=0.5,by=0.001)
y <- runks(cutoff)
plot(cutoff,y)
runks <- Vectorize(function(cutoff) {
X <- mags[mags>cutoff]-cutoff
mu <- mean(X)
v <- var(X)
scale <- v/mu
shape <- mu^2/v
candidate <- rgamma(length(X),scale=scale,shape=shape)
ks.test(X,candidate)$p.value
})
cutoff <- seq(from=0.4,to=0.8,by=0.001)
y <- runks(cutoff)
plot(cutoff,y)
