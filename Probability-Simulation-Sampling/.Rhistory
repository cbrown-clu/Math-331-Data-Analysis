f <- table(sunspot.year)
f <- table(spots)
f
plot(f)
temp <- table(spots)
f <- temp/sum(temp)
plot(f)
temp <- table(spots)
f <- table(0:max(temp),temp/sum(temp))
countem <- function(data,x) {
sum(data==x)
}
temp <- sapply(0:max(spots),countem)
countem <- function(data,x) {
sum(data==x)
}
temp <- sapply(0:max(spots),function(z) countem(spots,z))
f <- temp/sum(temp)
plot(f)
barplot(f)
countem <- function(data,x) {
sum(data==x)
}
X <- 0:max(spots)
temp <- sapply(X,function(z) countem(spots,z))
f <- temp/sum(temp)
barplot(f)
Y <- cumsum(f)
plot(X,Y)
set.seed(42)
y <- runif(1000)
find_X <- function(y) {
location <- which.min(abs(Y-y))
return(X[location])
}
draws <- sapply(y,find_X)
hist(draws)
hist(draws,breaks=60)
draws=sample(spots,1000)
draws=sample(spots,1000,replace=TRUE)
hist(draws)
draws=sample(spots,1000,replace=TRUE)
hist(draws,breaks=60
draws=sample(spots,1000,replace=TRUE)
hist(draws,breaks=60)
data(Nile)
head(Nile)
hist(Nile)
f <- density(Nile)
plot(f)
?density
f <- density(Nile,n=100)
plot(f)
f <- density(Nile,n=50)
plot(f)
f <- density(Nile,n=500)
plot(f)
f <- density(Nile)
plot(f)
?integrate
x <- 1200
F <- integrate(f,lower=0,upper=x)
f(1200)
f
Nile_density <- density(Nile)
plot(Nile_density)
?approxfun
f <- approxfun(Nile_density)
x <- 1200
F <- integrate(f,lower=0,upper=x)
f(1200)
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
x <- 1200
F <- integrate(f,lower=0,upper=x)
f(2)
f(seq(from=0,to=10000,by=100))
f <- Vectorize(f)
f(seq(from=0,to=10000,by=100))
integrate(f,0,100)
integrate(f,0,1000)
integrate(f,0,10000)
x <- 1200
F <- integrate(f,lower=0,upper=x)
scaling <- integrate(f,lower=0,upper=2000)
X <- 0:2000
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:1400
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 100:1400
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:100
X <- 0:100
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:1000
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:100
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z))
X <- 0:10000
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE))
plot(X,Y)
integrate(f,lower=-Inf,upper=1200,stop.on.error = FALSE)
integrate(f,lower=-Inf,upper=1200,stop.on.error = FALSE)[1]
integrate(f,lower=-Inf,upper=1200,stop.on.error = FALSE)$value
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- 0:10000
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
X <- 0:2000
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
X <- 0:max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
set.seed(42)
y <- runif(1000)
find_X <- function(y) {
location <- which.min(abs(Y-y))
return(X[location])
}
draws <- sapply(y,find_X)
hist(draws,breaks=60)
unique(spots)
sort(unique(spots))
sort(unique(Nile))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
X <- seq(from=0,to=1,by=0.01)
f <- Vectorize(
function(x) {
return(x*(1-x))
}
)
Y <- f(X)
plot(X,Y)
plot(X,Y,type='l')
polygon(X,Y)
plot(X,Y,type='l')
polygon(X,Y)
plot(X,Y,type='l')
XX <- c(X,rev(X))
YY <- c(Y,rep(0,length(XX)))
polygon(XX,YY,col='red')
length(XX)
length(YY)
plot(X,Y,type='l')
XX <- c(X,rev(X))
YY <- c(Y,rep(0,length(X)))
polygon(XX,YY,col='red')
X <- seq(from=0,to=1,by=0.01)
f <- Vectorize(
function(x) {
return(x*(1-x))
}
)
Y <- f(X)
plot(X,Y,type='l')
XX <- c(X,rev(X))
YY <- c(Y,rep(0,length(X)))
polygon(XX,YY,col='red')
X <- seq(from=0,to=1,by=0.01)
f <- Vectorize(
function(x) {
return(x*(1-x))
}
)
Y <- f(X)
plot(X,Y,type='l',lw=3)
X <- seq(from=0,to=1,by=0.01)
f <- Vectorize(
function(x) {
return(x*(1-x))
}
)
Y <- f(X)
plot(X,Y,type='l',lwd=3)
XX <- c(X,rev(X))
YY <- c(Y,rep(0,length(X)))
polygon(XX,YY,col='red')
X <- seq(from=0,to=1,by=0.01)
f <- Vectorize(
function(x) {
return(x*(1-x))
}
)
Y <- f(X)
plot(X,Y,type='l',lwd=4)
XX <- c(X,rev(X))
YY <- c(Y,rep(0,length(X)))
polygon(XX,YY,col='red')
image_area <- (xmax-xmin)*(ymax-ymin)
xmin <- 0
xmax <- 1
ymin <- 0
ymax <- 0.3
image_area <- (xmax-xmin)*(ymax-ymin)
X <- runif(number_of_darts,min=xmin,max=xmax)
xmin <- 0
xmax <- 1
ymin <- 0
ymax <- 0.3
number_of_darts <- 10000
image_area <- (xmax-xmin)*(ymax-ymin)
X <- runif(number_of_darts,min=xmin,max=xmax)
Y <- runif(number_of_darts,min=ymin,max=ymax)
darts_in_region <- which(Y <= f(X))
darts_in_region <- length(which(Y <= f(X)))
darts_in_region/number_of_darts
image_area <- (xmax-xmin)*(ymax-ymin)
image_area
darts_in_region/number_of_darts * image_area
?integrate
integrate(f,lower=0,upper=1)
f_temp <- function(x1,x2) {
if (x1>=0 & x1<=1 & x2>=0 & x2<=1) {
return(5-x1-x2)
} else {
return(0)
}
}
number_of_darts <- 10000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=5)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
number_of_darts <- 10000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=5)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
length(which(outputs<=Y))/number_of_darts * 2*2*5
number_of_darts <- 10000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=5)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
volume <- length(which(outputs<=Y))/number_of_darts * 2*2*5
volume
set.seed(42)
number_of_darts <- 100000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=5)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
volume <- length(which(outputs<=Y))/number_of_darts * 2*2*5
volume
f <- function(x1,x2) {
return(f_temp(x1,x2)/volume)
}
set.seed(42)
number_of_darts <- 1000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=1)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
keepers <- which(outputs<=Y)
x1 <- X1[keepers]
x2 <- X2[keepers]
plot(x1,x2)
set.seed(42)
number_of_darts <- 100000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=5)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
volume <- length(which(Y<=outputs))/number_of_darts * 2*2*5
volume
f <- function(x1,x2) {
return(f_temp(x1,x2)/volume)
}
set.seed(42)
number_of_darts <- 1000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=1)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
keepers <- which(Y<=outputs)
x1 <- X1[keepers]
x2 <- X2[keepers]
plot(x1,x2)
set.seed(42)
number_of_darts <- 10000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=1)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
keepers <- which(Y<=outputs)
x1 <- X1[keepers]
x2 <- X2[keepers]
plot(x1,x2)
f_temp <- function(x1,x2) {
if (x1>=0 & x1<=2 & x2>=0 & x2<=2) {
return(5*exp(-x1-x2))
} else {
return(0)
}
}
set.seed(42)
number_of_darts <- 100000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=5)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
volume <- length(which(Y<=outputs))/number_of_darts * 2*2*5
volume
f <- function(x1,x2) {
return(f_temp(x1,x2)/volume)
}
set.seed(42)
number_of_darts <- 10000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=1)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
keepers <- which(Y<=outputs)
x1 <- X1[keepers]
x2 <- X2[keepers]
plot(x1,x2)
set.seed(42)
number_of_darts <- 1000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=1)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
keepers <- which(Y<=outputs)
x1 <- X1[keepers]
x2 <- X2[keepers]
plot(x1,x2)
set.seed(42)
number_of_darts <- 10000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=1)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
keepers <- which(Y<=outputs)
x1 <- X1[keepers]
x2 <- X2[keepers]
plot(x1,x2)
set.seed(42)
number_of_darts <- 5000
X1 <- runif(number_of_darts,min=0,max=2)
X2 <- runif(number_of_darts,min=0,max=2)
Y <- runif(number_of_darts,min=0,max=1)
outputs <- sapply(1:length(X1),function(j) f_temp(X1[j],X2[j]))
keepers <- which(Y<=outputs)
x1 <- X1[keepers]
x2 <- X2[keepers]
plot(x1,x2)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
extra_steps <- 2*coin_flips
coin_flips <- sample(c(-1,1),100)
extra_steps <- 2*coin_flips
coin_flips <- sample(c(-1,1),100,replace=TRUE)
extra_steps <- 2*coin_flips
steps <- cumsum(1+extra_steps)
location <- cumsum(1+extra_steps)
plot(location)
set.seed(42)
coin_flips <- sample(c(-1,1),100,replace=TRUE)
extra_steps <- 2*coin_flips
location <- cumsum(1+extra_steps)
plot(location)
location[-1]
tail(location)
tail(location,1)
set.seed(42)
number_of_trips <- 10000
one_trip <- function() {
coin_flips <- sample(c(-1,1),100,replace=TRUE)
extra_steps <- 2*coin_flips
location <- cumsum(1+extra_steps)
return(tail(location,1))
}
data <- sapply(1:number_of_trips,function(z) one_trip())
### Example: Professor Z's Office Hours
Professor Z tries to show up at his office for appointments on time.  He really does!  But students and faculty frequently stop him to ask questions or just chat, and he is a typical absent-minded professor, so sometimes he is late.
set.seed(42)
number_of_trips <- 10000
one_trip <- function() {
coin_flips <- sample(c(-1,1),100,replace=TRUE)
extra_steps <- 2*coin_flips
location <- cumsum(1+extra_steps)
return(tail(location,1))
}
data <- sapply(1:number_of_trips,function(z) one_trip())
hist(data,breaks=60)
hist(data,breaks=60,col='blue')
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
data <- sample(c(0,1,1,1,1,1,1,2,2,2),100000)
data <- sample(c(0,1,1,1,1,1,1,2,2,2),100000,replace=FALSE)
data <- sample(c(0,1,1,1,1,1,1,2,2,2),100000,replace=TRUE)
mean(data)
data <- sample(c(0,1,1,1,1,1,1,2,2,2),1000000,replace=TRUE)
mean(data)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
x <- c(1,2,5,7)
x^2
f <- function(x) {
if (x>3) {
return(0)
} else {
return(x^2)
}
}
f <- Vectorize(f)
x <- c(1,2,5,7)
f(x)
run_experiments <- function(number_of_experiments) {
data <- sapply(1:number_of_experiments,
function(z) one_roll())
number_of_7 <- length(which(data==7))
return(number_of_7/number_of_experiments)
}
run_experiments <- Vectorize(run_experiments)
X <- 100*(1:20)
estimates <- run_experiments(X)
Y <- abs(estimates-6/36)
plot(X,Y)
X <- 100*(1:200)
estimates <- run_experiments(X)
Y <- abs(estimates-6/36)
plot(X,Y)
box <- c(rep(0,10),rep(1,30),rep(2,50),rep(3,10))
data <- sample(box,500,replace=TRUE)
hist(data,breaks=60)
barplot(table(data))
data(HairEyeColor)
head(HairEyeColor)
data(Loblolly)
head(Loblolly)
X <- Loblolly$Seed
X <- as.character(Loblolly$Seed)
X <- as.numeric(as.character(Loblolly$Seed))
unique(X)
length(unique(X))
data <- sample(X,500,replace=TRUE)
hist(data,breaks=60)
barplot(table(data))
data(quakes)
quakes$stations
unique(quakes$stations)
?hist
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
hist(Nile,freq=TRUE)
lines(X,Y,col='blue',lwd=2)
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
hist(Nile,freq=FALSE)
lines(X,Y,col='blue',lwd=2)
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
hist(Nile,freq=FALSE)
lines(X,f(X),col='blue',lwd=2)
plot(X,Y,type='l',lwd=2)
