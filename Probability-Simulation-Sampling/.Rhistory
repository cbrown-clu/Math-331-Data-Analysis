knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
one_roll <- function() {
return(sum(sample(one_die,2,replace=TRUE)))
}
print(one_roll())
one_die <- 1:6
print(one_roll())
print(one_roll)
print(one_roll())
print(one_roll())
sapply(1:10,function(z) print(one_roll()))
sapply(1:10,function(z) one_roll())
number_of_experiments <- 10000
data <- sapply(1:number_of_experiments,
function(z) one_roll())
number_of_7 <- length(which(data==7))
number_of_7/number_of_experiments
7/36
number_of_experiments <- 100000
one_die <- 1:6
one_roll <- function() {
return(sum(sample(one_die,2,replace=TRUE)))
}
print(one_roll())
print(one_roll())
sapply(1:10,function(z) one_roll())
data <- sapply(1:number_of_experiments,
function(z) one_roll())
number_of_7 <- length(which(data==7))
number_of_7/number_of_experiments
6/36
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
return(abs(arrival_time[1]-arrival_time[2])<=15)
one_rep <- function() {
arrival_time <- runif(2)
return(abs(arrival_time[1]-arrival_time[2])<=15)
}
arrival_time <- runif(2)
return(abs(arrival_time[1]-arrival_time[2])<=15)
abs(arrival_time[1]-arrival_time[2])<=15
arrival_time <- runif(2,min=0,max=60)
abs(arrival_time[1]-arrival_time[2])<=15
arrival_time <- runif(2,min=0,max=60)
abs(arrival_time[1]-arrival_time[2])<=15
arrival_time <- runif(2,min=0,max=60)
abs(arrival_time[1]-arrival_time[2])<=15
one_rep <- function() {
arrival_time <- runif(2,min=0,max=60)
abs(arrival_time[1]-arrival_time[2])<=15
}
data <- sapply(1:number_of_experiments,
function(z) one_rep())
length(which(data))/number_of_experiments
1/2*15^2/60^2
arrival_time <- runif(2,min=0,max=60)
wait_time <- runif(1,min=5,max=15)
abs(arrival_time[1]-arrival_time[2])<=wait_time
arrival_time <- runif(2,min=0,max=60)
wait_time <- runif(1,min=5,max=15)
abs(arrival_time[1]-arrival_time[2])<=wait_time
arrival_time <- runif(2,min=0,max=60)
wait_time <- runif(1,min=10,max=20)
abs(arrival_time[1]-arrival_time[2])<=wait_time
one_rep <- function() {
arrival_time <- runif(2,min=0,max=60)
wait_time <- runif(1,min=10,max=20)
abs(arrival_time[1]-arrival_time[2])<=wait_time
}
data <- sapply(1:number_of_experiments,
function(z) one_rep())
length(which(data))/number_of_experiments
one_rep <- function() {
arrival_time <- runif(2,min=0,max=60)
wait_time <- runif(1,min=0,max=20)
abs(arrival_time[1]-arrival_time[2])<=wait_time
}
data <- sapply(1:number_of_experiments,
function(z) one_rep())
length(which(data))/number_of_experiments
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
choose(52,5)
runif()
runif(1)
runif(10)
runif(20)
data <- runif(100000)
runif(5)
runif(5)
runif(5)
set.seed(1234)
runif(5)
set.seed(1234)
runif(5)
sample(data,3)
sample(data,3)
data <- c('red','blue','green','yellow')
sample(data,3)
sample(data,3,replace = TRUE)
set.seed(1234)
sample(data,3)
set.seed(1234)
sample(data,3,replace = TRUE)
choices <- c('a','b','c','d')
sample(choices, 20, replace = TRUE)
choices <- c('a','a','a','b','c','d')
sample(choices, 20, replace = TRUE)
set.seed(4815162342) # Think Lost
set.seed(42) # Hitchhiker's Guide
number_of_experiments <- 100000
one_die <- 1:6
one_roll <- function() {
return(sum(sample(one_die,2,replace=TRUE)))
}
print(one_roll())
print(one_roll())
sapply(1:10,function(z) one_roll())
data <- sapply(1:number_of_experiments,
function(z) one_roll())
number_of_7 <- length(which(data==7))
number_of_7/number_of_experiments
6/36
set.seed(42)
inputs <- runif(10000,min=0,max=5)
f <- function(x) {
return(x*(1-x))
}
outputs <- f(inputs)
index <- which.max(outputs)
max(outputs)
index <- which.max(outputs)
inputs[index]
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
X <- seq(from=-3,to=3,by=0.01)
Y <- pnorm(X)
plot(X,Y)
y <- runif(1)
plot(X,Y)
abline(h=r,col='red')
y <- runif(1)
plot(X,Y)
abline(h=y,col='red')
location <- which.min(abs(Y-y))
the_draw <- X[location]
location <- which.min(abs(Y-y))
the_draw <- X[location]
plot(X,Y)
abline(h=y,col='red')
abline(v=the_draw,col='blue')
set.seed(42)
plot(X,Y)
abline(h=y,col='red')
location <- which.min(abs(Y-y))
the_draw <- X[location]
plot(X,Y)
abline(h=y,col='red')
abline(v=the_draw,col='blue')
set.seed(42)
y <- runif(1000)
find_X <- function(y) {
location <- which.min(abs(Y-y))
return(X[location])
}
draws <- sapply(y,find_X)
hist(draws,breaks=40)
data(sunspot.year)
head(sunspot.year)
f <- table(sunspot.year)
sunspot.year
?round
data(sunspot.year)
spots <- ceiling(sunspot.year)
head(spots)
f <- table(sunspot.year)
f <- table(spots)
f
plot(f)
temp <- table(spots)
f <- temp/sum(temp)
plot(f)
temp <- table(spots)
f <- table(0:max(temp),temp/sum(temp))
countem <- function(data,x) {
sum(data==x)
}
temp <- sapply(0:max(spots),countem)
countem <- function(data,x) {
sum(data==x)
}
temp <- sapply(0:max(spots),function(z) countem(spots,z))
f <- temp/sum(temp)
plot(f)
barplot(f)
countem <- function(data,x) {
sum(data==x)
}
X <- 0:max(spots)
temp <- sapply(X,function(z) countem(spots,z))
f <- temp/sum(temp)
barplot(f)
Y <- cumsum(f)
plot(X,Y)
set.seed(42)
y <- runif(1000)
find_X <- function(y) {
location <- which.min(abs(Y-y))
return(X[location])
}
draws <- sapply(y,find_X)
hist(draws)
hist(draws,breaks=60)
draws=sample(spots,1000)
draws=sample(spots,1000,replace=TRUE)
hist(draws)
draws=sample(spots,1000,replace=TRUE)
hist(draws,breaks=60
draws=sample(spots,1000,replace=TRUE)
hist(draws,breaks=60)
data(Nile)
head(Nile)
hist(Nile)
f <- density(Nile)
plot(f)
?density
f <- density(Nile,n=100)
plot(f)
f <- density(Nile,n=50)
plot(f)
f <- density(Nile,n=500)
plot(f)
f <- density(Nile)
plot(f)
?integrate
x <- 1200
F <- integrate(f,lower=0,upper=x)
f(1200)
f
Nile_density <- density(Nile)
plot(Nile_density)
?approxfun
f <- approxfun(Nile_density)
x <- 1200
F <- integrate(f,lower=0,upper=x)
f(1200)
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
x <- 1200
F <- integrate(f,lower=0,upper=x)
f(2)
f(seq(from=0,to=10000,by=100))
f <- Vectorize(f)
f(seq(from=0,to=10000,by=100))
integrate(f,0,100)
integrate(f,0,1000)
integrate(f,0,10000)
x <- 1200
F <- integrate(f,lower=0,upper=x)
scaling <- integrate(f,lower=0,upper=2000)
X <- 0:2000
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:1400
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 100:1400
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:100
X <- 0:100
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:1000
Y <- sapply(X,function(z) integrate(f,lower=0,upper=z))
X <- 0:100
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z))
X <- 0:10000
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE))
plot(X,Y)
integrate(f,lower=-Inf,upper=1200,stop.on.error = FALSE)
integrate(f,lower=-Inf,upper=1200,stop.on.error = FALSE)[1]
integrate(f,lower=-Inf,upper=1200,stop.on.error = FALSE)$value
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- 0:10000
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
X <- 0:2000
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
X <- 0:max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
plot(X,Y)
set.seed(42)
y <- runif(1000)
find_X <- function(y) {
location <- which.min(abs(Y-y))
return(X[location])
}
draws <- sapply(y,find_X)
hist(draws,breaks=60)
unique(spots)
sort(unique(spots))
sort(unique(Nile))
