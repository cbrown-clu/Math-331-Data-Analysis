f <- Vectorize(f)
x <- c(1,2,5,7)
f(x)
run_experiments <- function(number_of_experiments) {
data <- sapply(1:number_of_experiments,
function(z) one_roll())
number_of_7 <- length(which(data==7))
return(number_of_7/number_of_experiments)
}
run_experiments <- Vectorize(run_experiments)
X <- 100*(1:20)
estimates <- run_experiments(X)
Y <- abs(estimates-6/36)
plot(X,Y)
X <- 100*(1:200)
estimates <- run_experiments(X)
Y <- abs(estimates-6/36)
plot(X,Y)
box <- c(rep(0,10),rep(1,30),rep(2,50),rep(3,10))
data <- sample(box,500,replace=TRUE)
hist(data,breaks=60)
barplot(table(data))
data(HairEyeColor)
head(HairEyeColor)
data(Loblolly)
head(Loblolly)
X <- Loblolly$Seed
X <- as.character(Loblolly$Seed)
X <- as.numeric(as.character(Loblolly$Seed))
unique(X)
length(unique(X))
data <- sample(X,500,replace=TRUE)
hist(data,breaks=60)
barplot(table(data))
data(quakes)
quakes$stations
unique(quakes$stations)
?hist
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
hist(Nile,freq=TRUE)
lines(X,Y,col='blue',lwd=2)
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
hist(Nile,freq=FALSE)
lines(X,Y,col='blue',lwd=2)
Nile_approx <- approxfun(Nile_density)
f <- function(x){
if (x<min(Nile) | x>max(Nile)) {
r <- 0
} else {
r <- Nile_approx(x)
}
return(r)
}
f <- Vectorize(f)
X <- min(Nile):max(Nile)
Y <- sapply(X,function(z) integrate(f,lower=-Inf,upper=z,stop.on.error = FALSE)$value)
hist(Nile,freq=FALSE)
lines(X,f(X),col='blue',lwd=2)
plot(X,Y,type='l',lwd=2)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
data(faithful)
head(faithful)
X <- faithful$eruptions
hist(X,breaks=60)
X <- faithful$waiting
hist(X,breaks=60)
X <- X[X>68]
hist(X)
hist(X,breaks=40)
hist(X,breaks=30)
mu <- mean(X)
sigma <- sd(X)
hist(X,breaks=30,freq=FALSE)
hist(X,breaks=30,freq=FALSE)
x <- seq(from=69,to=100,by=0.5)
Y <- dnorm(x,mean=mu,sd=sigma)
hist(X,breaks=30,freq=FALSE)
x <- seq(from=69,to=100,by=0.5)
Y <- dnorm(x,mean=mu,sd=sigma)
lines(x,y,col='blue',lwd=2)
hist(X,breaks=30,freq=FALSE)
x <- seq(from=69,to=100,by=0.5)
y <- dnorm(x,mean=mu,sd=sigma)
lines(x,y,col='blue',lwd=2)
hist(X,breaks=30,freq=FALSE)
x <- seq(from=69,to=100,by=0.5)
y <- dnorm(x,mean=mu,sd=sigma)
lines(x,y,col='blue',lwd=3)
interval <- qnorm(c(.05,.95),mean=mu,sd=sigma)
interval
interval95 <- qnorm(c(.025,.975),mean=mu,sd=sigma)
interval95
data(faithful)
X <- faithful$eruptions
hist(X,breaks=60)
dX <- density(X)
dX <- density(X)
x <- seq(from = 1.5,to = 5.5,by=0.1)
dX <- density(X)
x <- seq(from = 1.5,to = 5.5,by=0.1)
f <- approxfun(dX$x,dX$y)
y <- f(x)
dX <- density(X)
x <- seq(from = 1.5,to = 5.5,by=0.1)
f <- approxfun(dX$x,dX$y)
y <- f(x)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='ble',lwd=3)
dX <- density(X)
x <- seq(from = 1.5,to = 5.5,by=0.1)
f <- approxfun(dX$x,dX$y)
y <- f(x)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
dX <- density(X,adjust=0.5)
x <- seq(from = 1.5,to = 5.5,by=0.1)
f <- approxfun(dX$x,dX$y)
y <- f(x)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
dX <- density(X,adjust=0.5)
x <- seq(from = 1.5,to = 5.5,by=0.01)
f <- approxfun(dX$x,dX$y)
y <- f(x)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
dX <- density(X,adjust=0.2)
x <- seq(from = 1.5,to = 5.5,by=0.01)
f <- approxfun(dX$x,dX$y)
y <- f(x)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
dX <- density(X,adjust=0.3)
x <- seq(from = 1.5,to = 5.5,by=0.01)
f <- approxfun(dX$x,dX$y)
y <- f(x)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
yy <- cumsum(y)
plot(x,yy)
yy <- cumsum(y)
plot(x,yy,type='l',lwd=2)
y
yy
yy <- cumsum(y)/100
plot(x,yy,type='l',lwd=2)
left <- x[which.min(abs(yy-.025))]
right <- x[which.min(abs(yy-.975))]
interval <- c(left,right)
interval
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
abline(v=left,col='red',lwd=3)
abline(v=right,col='red',lwd=3)
left <- x[which.min(abs(yy-.1))]
right <- x[which.min(abs(yy-.9))]
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
abline(v=left,col='red',lwd=3)
abline(v=right,col='red',lwd=3)
X <- faithful$waiting
hist(X,breaks=60)
X <- X[X>68]
hist(X,breaks=30,freq=FALSE)
mu <- mean(X)
sigma <- sd(X)
hist(X,breaks=30,freq=FALSE)
x <- seq(from=69,to=100,by=0.5)
y <- dnorm(x,mean=mu,sd=sigma)
lines(x,y,col='blue',lwd=3)
sample_size <- length(X)
one_mean <- function() {
return(mean(sample(X,sample_size,replace=TRUE)))
}
sample_means <- sapply(1:1000,function(z) one_mean())
sample_size <- length(X)
one_mean <- function() {
return(mean(sample(X,sample_size,replace=TRUE)))
}
sample_means <- sapply(1:1000,function(z) one_mean())
hist(sample_means,breaks=60,freq=FALSE)
sample_size <- length(X)
one_mean <- function() {
return(mean(sample(X,sample_size,replace=TRUE)))
}
sample_means <- sapply(1:1000,function(z) one_mean())
meanmu <- mean(sample_means)
meansigma <- sd(sample_means)
xmean <- seq(from=78,to=83,by=0.01)
ymean <- dnorm(xmean,mean=meanmu,sd=meansigma)
hist(X,breaks=30,freq=FALSE)
lines(x,y,col='blue',lwd=3)
lines(xmean,ymean,col='red',lwd=3)
sample_size <- length(X)
one_mean <- function() {
return(mean(sample(X,sample_size,replace=TRUE)))
}
sample_means <- sapply(1:1000,function(z) one_mean())
meanmu <- mean(sample_means)
meansigma <- sd(sample_means)
xmean <- seq(from=78,to=83,by=0.01)
ymean <- dnorm(xmean,mean=meanmu,sd=meansigma)
hist(X,breaks=30,freq=FALSE,ylim=c(0,max(ymean)))
lines(x,y,col='blue',lwd=3)
lines(xmean,ymean,col='red',lwd=3)
interval90 <- qnorm(c(.05,.95),mean=meanmu,sd=meansigma)
interval90
interval95 <- qnorm(c(.025,.975),mean=meanmu,sd=meansigma)
interval95
data(faithful)
X <- faithful$eruptions
hist(X,breaks=60)
dX <- density(X,adjust=0.3)
x <- seq(from = 1.5,to = 5.5,by=0.01)
f <- approxfun(dX$x,dX$y)
y <- f(x)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
yy <- cumsum(y)/100
plot(x,yy,type='l',lwd=2)
sample_size <- length(X)
one_mean <- function() {
return(mean(sample(X,sample_size,replace=TRUE)))
}
sample_means <- sapply(1:1000,function(z) one_mean())
min(sample_means)
max(sample_means)
sample_size <- length(X)
one_mean <- function() {
return(mean(sample(X,sample_size,replace=TRUE)))
}
sample_means <- sapply(1:1000,function(z) one_mean())
meanmu <- mean(sample_means)
meansd <- sd(sample_means)
xmean <- seq(from=3.27,to=3.7,by=0.01)
ymean <- dnorm(xmean,mean=meanmu,sd=meansd)
hist(X,breaks=60,freq=FALSE,ylim=c(0,max(ymean)))
lines(x,y,col='blue',lwd=3)
lines(xmean,ymean,col='red',lwd=3)
interval <- qnorm(c(.025,.0975),mean=meanmu,sd=meansigma)
interval
interval <- qnorm(c(.025,.0975),mean=meanmu,sd=meansigma)
interval <- qnorm(c(.025,.975),mean=meanmu,sd=meansigma)
interval
sample_size <- length(X)
one_mean <- function() {
return(mean(sample(X,sample_size,replace=TRUE)))
}
sample_means <- sapply(1:1000,function(z) one_mean())
meanmu <- mean(sample_means)
meansigma <- sd(sample_means)
xmean <- seq(from=3.27,to=3.7,by=0.01)
ymean <- dnorm(xmean,mean=meanmu,sd=meansigma)
hist(X,breaks=60,freq=FALSE,ylim=c(0,max(ymean)))
lines(x,y,col='blue',lwd=3)
lines(xmean,ymean,col='red',lwd=3)
interval <- qnorm(c(.025,.975),mean=meanmu,sd=meansigma)
interval
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
abline(v=interval[1],col='red',lwd=3)
abline(v=interval[2],col='red',lwd=3)
interval <- qnorm(c(.1,.9),mean=meanmu,sd=meansigma)
hist(X,breaks=60,freq=FALSE)
lines(x,y,col='blue',lwd=3)
abline(v=interval[1],col='red',lwd=3)
abline(v=interval[2],col='red',lwd=3)
data(morley)
head(morley)
morley
data(Orange)
head(Orange)
data(LakeHuron)
head(LakeHuron)
hist(LakeHuron)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
quakes <- read.csv("Quakes.csv")
hist(quakes$Magnitude)
quakes2 <- quakes[quakes$Magnitude>2,]
interarrival <- quakes2$TimelineHours[2:nrow(quakes2)] -
quakes2$TimelineHours[1:(nrow(quakes2)-1)]
hist(interarrival)
rm(quakes,quakes2)
hist(interarrival)
hist(interarrival,breaks=60)
hist(log(interarrival),breaks=60)
hist(log(log(interarrival)),breaks=60)
hist(log(interarrival),breaks=60)
sample_size <- 200
rate <- 2
X <- rexp(sample_size,rate = rate)
Y <- rexp(sample_size,rate = rate)
ks.test(X,Y)
sample_size <- 200
X <- rexp(sample_size,rate = 1)
Y <- rexp(sample_size,rate = 3)
ks.test(X,Y)
sample_size <- 200
X <- rexp(sample_size,rate = 2)
Y <- rexp(sample_size,rate = 3)
ks.test(X,Y)
lambda <- 1/mean(interarrival)
sample_size <- length(interarrival)
candidate <- rexp(sample_size,rate=lambda)
ks.test(interarrival,candidate)
X <- log(interarrival)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- log(interarrival)
X <- X[!is.na(X)]
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
length(X)
length(candidate)
which(is.na(X))
which(is.na(candidate))
lambda
mean(X)
X
X <- log(interarrival+1)
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
X <- log(interarrival[interarrival>0])
lambda <- 1/mean(X)
candidate <- rexp(length(X),rate=lambda)
ks.test(X,candidate)
sample_size <- length(X)
xmin <- seq(from=10,to=210,by=10)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+length(X)/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size)^(-1/(alpha-1))))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
compute_KS(xmin)
hist(draw_sample(100))
hist(X)
min(X)
sample_size <- length(X)
xmin <- seq(from=2,to=4,by=0.01)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+length(X)/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size)^(-1/(alpha-1))))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
compute_KS(xmin)
draw_sample(3.1)
hist(draw_sample(3.1))
hist(log(draw_sample(3.1)))
hist(X)
hist(interarrival)
X <- interarrival[interarrival>0]
hist(X)
sample_size <- length(X)
xmin <- seq(from=10,to=200,by=10)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+length(X)/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size)^(-1/(alpha-1))))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
ks_data
min(X)
sample_size <- length(X)
xmin <- seq(from=10,to=30,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+length(X)/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size)^(-1/(alpha-1))))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
ks_data
hist(draw_sample(15))
draw_sample(15)
sample_size <- length(X)
xmin <- seq(from=10,to=30,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+length(X)/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
ks_data
sample_size <- length(X)
xmin <- seq(from=1,to=30,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+length(X)/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
ks_data
hist(draw_sample(10))
sample_size <- length(X)
xmin <- seq(from=1,to=30,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
ks_data
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
sample_size <- length(X)
xmin <- seq(from=1,to=300,by=0.1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate,exact=FALSE)$p.value
})
ks_data <- compute_KS(xmin)
head(ks_data)
sample_size <- length(X)
xmin <- seq(from=1,to=1000,by=1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
ks_data <- compute_KS(xmin)
head(ks_data)
ks_data
sample_size <- length(X)
xmin <- seq(from=1,to=1000,by=1)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
head(ks_data)
sample_size <- length(X)
xmin <- seq(from=1,to=5000,by=10)
draw_sample <- Vectorize(function(xmin) {
alpha <- 1+1/(sum(log(X/xmin)))
return(xmin * (1-runif(sample_size))^(-1/(alpha-1)))
})
compute_KS <- Vectorize(function(xmin) {
candidate <- draw_sample(xmin)
ks.test(X,candidate)$p.value
})
suppressWarnings(ks_data <- compute_KS(xmin))
head(ks_data)
max(ks_data)
